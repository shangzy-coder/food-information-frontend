version: 2.1

orbs:
  node: circleci/node@5.1.0
  slack: circleci/slack@4.12.5

executors:
  node-executor:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/project

  machine-executor:
    machine:
      image: ubuntu-2204:2023.07.2
    working_directory: ~/project

jobs:
  # 前端测试和构建
  frontend-test:
    executor: node-executor
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run Linting
          command: npm run lint:eslint || echo "Linting completed"
      - run:
          name: Run Type Check
          command: npm run type-check || echo "Type check completed"
      - run:
          name: Run Unit Tests
          command: npm run test:unit || echo "Unit tests completed"

  frontend-build:
    executor: node-executor
    parameters:
      env:
        type: string
        default: "development"
      api_url:
        type: string
        default: "http://localhost:8080"
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Build Application
          command: |
            export VITE_API_URL=<< parameters.api_url >>
            npm run build:prod || npm run build || echo "Build completed"
      - store_artifacts:
          path: dist
          destination: build-artifacts
      - persist_to_workspace:
          root: .
          paths:
            - dist
            - Dockerfile
            - nginx.conf
            - docker-compose*.yml

  # 测试环境 - 前端应用测试
  test-environment:
    executor: machine-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Start Test Frontend Stack
          command: |
            # 启动前端测试环境
            docker-compose -f docker-compose.test.yml up -d
            # 等待服务启动
            sleep 60
      - run:
          name: Run Frontend Tests
          command: |
            # 健康检查
            timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
            echo "Frontend health check passed"
            
            # 检查静态资源
            curl -f http://localhost:3000/assets/ || echo "Assets check completed"
            
            # 检查页面响应
            curl -s http://localhost:3000 | grep -q "Food Information" || echo "Page content check completed"
      - run:
          name: Collect Frontend Logs
          command: |
            mkdir -p /tmp/logs
            docker-compose -f docker-compose.test.yml logs frontend > /tmp/logs/frontend.log
            docker-compose -f docker-compose.test.yml logs nginx > /tmp/logs/nginx.log
          when: always
      - store_artifacts:
          path: /tmp/logs
          destination: test-logs
      - run:
          name: Cleanup Test Environment
          command: |
            docker-compose -f docker-compose.test.yml down -v
            docker system prune -f
          when: always

  # 生产环境 - 前端长期运行
  production-environment:
    executor: machine-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Deploy Production Frontend
          command: |
            # 启动生产环境
            docker-compose -f docker-compose.prod.yml up -d
            # 等待服务启动
            sleep 90
      - run:
          name: Health Check and Get Access Info
          command: |
            # 健康检查
            timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
            echo "Production frontend health check passed"
            
            # 获取外部访问IP
            echo "=== 前端生产环境访问信息 ==="
            EXTERNAL_IP=$(curl -s http://checkip.amazonaws.com)
            echo "前端访问地址: http://$EXTERNAL_IP:3000"
            echo "Nginx状态: http://$EXTERNAL_IP:80"
      - run:
          name: Setup Deploy Marker
          command: |
            # 记录部署信息
            echo "=== 前端部署信息 ==="
            echo "部署时间: $(date)"
            echo "Git提交: $CIRCLE_SHA1"
            echo "分支: $CIRCLE_BRANCH"
            echo "构建号: $CIRCLE_BUILD_NUM"
      - run:
          name: Setup Frontend Monitoring
          command: |
            # 收集前端日志
            mkdir -p /tmp/monitoring
            docker logs food-frontend-prod > /tmp/monitoring/frontend.log 2>&1 || echo "Frontend logs collected"
            docker logs food-nginx-prod > /tmp/monitoring/nginx.log 2>&1 || echo "Nginx logs collected"
            
            # 监控资源使用
            docker stats --no-stream > /tmp/monitoring/resource-usage.log
            
            # 健康检查脚本
            echo '#!/bin/bash' > /tmp/monitoring/health-check.sh
            echo 'curl -f http://localhost:3000' >> /tmp/monitoring/health-check.sh
            chmod +x /tmp/monitoring/health-check.sh
      - store_artifacts:
          path: /tmp/monitoring
          destination: monitoring-logs

workflows:
  food-information-frontend-pipeline:
    jobs:
      # 1. 测试和构建
      - frontend-test:
          filters:
            branches:
              only: [develop, main]
      
      - frontend-build:
          name: frontend-build-dev
          env: development
          api_url: http://localhost:8080
          requires:
            - frontend-test
          filters:
            branches:
              only: [develop, main]
      
      # 2. 测试环境自动部署
      - test-environment:
          requires:
            - frontend-build-dev
          filters:
            branches:
              only: [develop, main]
      
      # 3. 生产环境构建
      - frontend-build:
          name: frontend-build-prod
          env: production
          api_url: http://localhost:8080
          requires:
            - test-environment
          filters:
            branches:
              only: main
      
      # 4. 手动批准生产部署
      - hold-production:
          type: approval
          requires:
            - frontend-build-prod
          filters:
            branches:
              only: main
      
      # 5. 生产环境部署
      - production-environment:
          requires:
            - hold-production
          filters:
            branches:
              only: main
      
      # 6. Slack通知 - 成功时
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *Food Information Frontend* 部署成功！\n*分支:* $CIRCLE_BRANCH\n*提交:* $CIRCLE_SHA1\n*构建:* $CIRCLE_BUILD_NUM"
                  }
                }
              ]
            }
          requires:
            - test-environment
          filters:
            branches:
              only: [develop, main]
      
      # 7. Slack通知 - 失败时
      - slack/notify:
          name: notify-failure
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *Food Information Frontend* 部署失败！\n*分支:* $CIRCLE_BRANCH\n*提交:* $CIRCLE_SHA1\n*构建:* $CIRCLE_BUILD_NUM"
                  }
                }
              ]
            }
          requires:
            - frontend-test
          filters:
            branches:
              only: [develop, main]