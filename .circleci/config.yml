version: 2.1

orbs:
  slack: circleci/slack@4.12.5

executors:
  node-executor:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/project

  machine-executor:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    working_directory: ~/project

jobs:
  # 前端测试和构建
  frontend-test:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-v1-{{ checksum "package.json" }}
            - npm-deps-v1-
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: npm-deps-v1-{{ checksum "package.json" }}
      - run:
          name: Run Linting
          command: npm run lint:eslint || echo "Linting completed"
      - run:
          name: Run Type Check
          command: npx vue-tsc --noEmit || echo "Type check completed"
      - run:
          name: Run Unit Tests
          command: npm run test || echo "Unit tests completed"

  frontend-build:
    executor: node-executor
    parameters:
      env:
        type: string
        default: "development"
      api_url:
        type: string
        default: "http://localhost:8080"
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-v1-{{ checksum "package.json" }}
            - npm-deps-v1-
      - run:
          name: Install Dependencies
          command: npm install
      - run:
          name: Build Application
          command: |
            export VITE_API_URL=<< parameters.api_url >>
            if [ "<< parameters.env >>" = "development" ]; then
              npm run build:dev
            else
              npm run build:prod
            fi
      - store_artifacts:
          path: dist
          destination: build-artifacts
      - persist_to_workspace:
          root: .
          paths:
            - dist
            - Dockerfile
            - nginx.conf
            - docker-compose*.yml

  # 测试环境 - 前端应用测试
  test-environment:
    executor: machine-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Start Test Frontend Stack
          command: |
            # 启动前端测试环境（使用development模式）
            docker-compose -f docker-compose.test.yml up -d --build
            # 等待服务启动
            sleep 60
      - run:
          name: Run Frontend Tests
          command: |
            # 健康检查
            timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
            echo "Frontend health check passed"
            
            # 检查页面响应
            curl -s http://localhost:3000 | grep -q "RuoYi" || echo "Page content check completed"
            
            # 检查API代理
            curl -f http://localhost:3000/dev-api/health || echo "API proxy check completed"
      - run:
          name: Collect Frontend Logs
          command: |
            mkdir -p /tmp/logs
            docker-compose -f docker-compose.test.yml logs frontend > /tmp/logs/frontend.log
            docker-compose -f docker-compose.test.yml logs nginx > /tmp/logs/nginx.log
          when: always
      - store_artifacts:
          path: /tmp/logs
          destination: test-logs
      - run:
          name: Cleanup Test Environment
          command: |
            docker-compose -f docker-compose.test.yml down -v
            docker system prune -f
          when: always
      # 添加成功通知
      - slack/notify:
          event: pass
          channel: $SLACK_DEFAULT_CHANNEL
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *Food Information Frontend* 测试环境部署成功！\n*分支:* $CIRCLE_BRANCH\n*提交:* $CIRCLE_SHA1\n*构建:* $CIRCLE_BUILD_NUM\n*项目:* food-information-frontend\n*环境:* Development"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "查看构建"
                      },
                      "url": "$CIRCLE_BUILD_URL"
                    }
                  ]
                }
              ]
            }

  # 生产环境 - 前端长期运行
  production-environment:
    executor: machine-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Deploy Production Frontend
          command: |
            # 获取外部IP用于生产环境配置
            export EXTERNAL_IP=$(curl -s http://checkip.amazonaws.com)
            echo "External IP: $EXTERNAL_IP"
            
            # 启动生产环境（使用production模式）
            docker-compose -f docker-compose.prod.yml up -d --build
            # 等待服务启动
            sleep 90
      - run:
          name: Health Check and Get Access Info
          command: |
            # 健康检查
            timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
            echo "Production frontend health check passed"
            
            # 获取外部访问IP
            echo "=== 前端生产环境访问信息 ==="
            EXTERNAL_IP=$(curl -s http://checkip.amazonaws.com)
            echo "前端访问地址: http://$EXTERNAL_IP:3000"
            echo "Nginx状态: http://$EXTERNAL_IP:80"
            
            # 检查页面内容
            curl -s http://localhost:3000 | grep -q "RuoYi" || echo "Production page check completed"
      - run:
          name: Setup Deploy Marker
          command: |
            # 记录部署信息
            echo "=== 前端部署信息 ==="
            echo "部署时间: $(date)"
            echo "Git提交: $CIRCLE_SHA1"
            echo "分支: $CIRCLE_BRANCH"
            echo "构建号: $CIRCLE_BUILD_NUM"
            echo "环境: Production"
      - run:
          name: Setup Frontend Monitoring
          command: |
            # 收集前端日志
            mkdir -p /tmp/monitoring
            docker logs food-frontend-prod > /tmp/monitoring/frontend.log 2>&1 || echo "Frontend logs collected"
            docker logs food-nginx-prod > /tmp/monitoring/nginx.log 2>&1 || echo "Nginx logs collected"
            
            # 监控资源使用
            docker stats --no-stream > /tmp/monitoring/resource-usage.log
            
            # 健康检查脚本
            echo '#!/bin/bash' > /tmp/monitoring/health-check.sh
            echo 'curl -f http://localhost:3000' >> /tmp/monitoring/health-check.sh
            chmod +x /tmp/monitoring/health-check.sh
      - store_artifacts:
          path: /tmp/monitoring
          destination: monitoring-logs
      # 添加生产环境成功通知
      - slack/notify:
          event: pass
          channel: $SLACK_DEFAULT_CHANNEL
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚀 *Food Information Frontend* 生产环境部署成功！\n*分支:* $CIRCLE_BRANCH\n*提交:* $CIRCLE_SHA1\n*构建:* $CIRCLE_BUILD_NUM\n*项目:* food-information-frontend\n*环境:* Production"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "查看构建"
                      },
                      "url": "$CIRCLE_BUILD_URL"
                    }
                  ]
                }
              ]
            }

  # 失败通知job
  notify-failure:
    executor: node-executor
    steps:
      - slack/notify:
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *Food Information Frontend* 部署失败！\n*分支:* $CIRCLE_BRANCH\n*提交:* $CIRCLE_SHA1\n*构建:* $CIRCLE_BUILD_NUM\n*项目:* food-information-frontend"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "查看失败原因"
                      },
                      "url": "$CIRCLE_BUILD_URL"
                    }
                  ]
                }
              ]
            }

workflows:
  food-information-frontend-pipeline:
    jobs:
      # 1. 测试和构建
      - frontend-test:
          filters:
            branches:
              only: [develop, main]
      
      - frontend-build:
          name: frontend-build-dev
          env: development
          api_url: http://localhost:8080
          requires:
            - frontend-test
          filters:
            branches:
              only: [develop, main]
      
      # 2. 测试环境自动部署
      - test-environment:
          requires:
            - frontend-build-dev
          filters:
            branches:
              only: [develop, main]
      
      # 3. 生产环境构建
      - frontend-build:
          name: frontend-build-prod
          env: production
          api_url: http://localhost:8080
          requires:
            - test-environment
          filters:
            branches:
              only: main
      
      # 4. 手动批准生产部署
      - hold-production:
          type: approval
          requires:
            - frontend-build-prod
          filters:
            branches:
              only: main
      
      # 5. 生产环境部署
      - production-environment:
          requires:
            - hold-production
          filters:
            branches:
              only: main
      
      # 6. 失败时通知
      - notify-failure:
          requires:
            - frontend-test
          filters:
            branches:
              only: [develop, main]